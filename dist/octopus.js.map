{"version":3,"sources":["node_modules/browser-pack/_prelude.js","components/namespace.js","components/rpcCommand.js","components/rpcEndpoint.js","components/rpcTransport.js","components/stockTransports.js","node_modules/debug-pest/index.js","octopus.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxnhxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"octopus.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","(function () {\n\n\t/* ------\n\t\n\t\tCode below is adapted from the debug library, duly licensed as below.\n\n\t\t(The MIT License)\n\n\t\tCopyright (c) 2014 TJ Holowaychuk <tj@vision-media.ca>\n\n\t\tPermission is hereby granted, free of charge, to any person obtaining a copy of this software\n\t\tand associated documentation files (the 'Software'), to deal in the Software without restriction,\n\t\tincluding without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\t\tand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\n\t\tsubject to the following conditions:\n\n\t\tThe above copyright notice and this permission notice shall be included in all copies or substantial\n\t\tportions of the Software.\n\n\t\tTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\n\t\tLIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n\t\tIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\t\tWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n\t\tSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\t------ */\n\n\tvar Namespace = function (namespaces) {\n\n\t\tthis.names = [];\n\t\tthis.skips = [];\n\n\t\tvar i;\n\t\tvar split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tvar len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) continue; // ignore empty strings\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tthis.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tthis.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\n\n\t\treturn this;\n\t};\n\n\n\tNamespace.prototype.test = function (value) {\n\t\tvar i, len;\n\n\t\tfor (i = 0, len = this.skips.length; i < len; i++) {\n\t\t\tif (!this.skips[i].test(value))\n\t\t\t\treturn false;\n\t\t}\n\n\t\tfor (i = 0, len = this.names.length; i < len; i++) {\n\t\t\tif (this.names[i].test(value))\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\n\tmodule.exports = Namespace;\n\n})();\n","(function () {\n\n\tconst Namespace = require('./namespace.js');\n\n\n\n\t/* ----------------------------------------------------------- */\n\n\n\tconst MESSAGETYPES = {\n\t\trequest: 'RQ',\n\t\tresponseAccept: 'RA',\n\t\tresponseFail: 'RF',\n\t\tresponseAcceptError: 'RAE',\n\t\tresponseFailError: 'RFE'\n\t};\n\n\n\tvar rpcCommand = function (name, endpoint, options) {\n\t\toptions = options || {};\n\t\t// console.log('Creating rpc command [%s] for endpoint [%s][%s]',name, endpoint.label, endpoint.dir);\n\t\tthis.name = name;\n\t\tthis.endpoint = endpoint;\n\t\tthis.requestHandlers = [];\n\t\tthis.responseHandlers = {};\n\t\tthis.onProvideFn = null;\n\t\tthis.endpoint.commands[name] = this;\n\n\t\tthis.logger = options.logger.child('CMD:' + this.name);\n\t\tthis.sendLogger = this.logger.child('send');\n\t\tthis.recvLogger = this.logger.child('recv');\n\t\tthis.logger.enabled && this.logger.log('Created new command as ', name);\n\n\t\tthis.MESSAGETYPES = MESSAGETYPES;\n\t\treturn this;\n\t};\n\n\n\trpcCommand.prototype.autoID = function () {\n\t\treturn Math.random().toString().substr(8) + '-' + Date.now();\n\t};\n\n\trpcCommand.prototype.sendToID = function (tid, msg, mode, pTransName) {\n\t\tvar _self = this;\n\n\t\tmsg.msgID = _self.autoID();\n\t\t_self.sendLogger.enabled && _self.sendLogger.log('\\n\\n[sendToID] called with tid[%s], msgID[%s], mode[%s], pTransName[%s] \\n', tid, msg.msgID, mode, pTransName);\n\n\t\t/*\n\t\t\tNOTE - Adding a check as a hotfix to avoind crashing on tName errors.\n\n\t\t\tSource of errors - sendToID is called from call() as well as recursively, when responding to messages.\n\n\t\t\tThe source of tName errors may be the async nature. Since this is async, there's a gap in between call & execution\n\t\t\tbetween which a \"remove()\" function call might delete the transport, raising such issues.\n\n\t\t\tCase #1 - Deleted transport after a call from .call(), but before the execution of sendToID, causing tName errors.\n\t\t\tCase #2 - Alternately, Deleted the transport after a message was recieved, but before a response could be sent.\n\n\t\t\tNOTE - EDGE CASE TO SOLVE :\n\t\t\tWhat happens if in either case, the response is critical for proper function / avoiding duplication of calls (see below),\n\t\t\tand could be sent because the reciever still exists (ie same tName), but over a different transport (ie different tID).\n\n\t\t\tHow duplication of calls -\n\t\t\t\tSender sends RPC\n\t\t\t\tReciever gets RPC & executes provider\n\t\t\t\tSender disconnects & reconnects with a new connection\n\t\t\t\tReciever removes previous socket & re-adds new socket (ie same tName, once initial handshake is done, but different tID).\n\t\t\t\tReciever RPC call response fails / ignored because old tID doesn't exist anymore.\n\t\t\t\tSender times out (or considers failure due to disconnection / remains hanging as a memory leak), even though RPC provider has executed on reciever\n\t\t\t\tApplication tries again assuming bad RPC call.\n\n\t\t\tPossible solution -\n\t\t\t\tif tID mismatch is found,\n\t\t\t\t\ta search of other transports with the same tName is done,\n\t\t\t\t\t \tif found, send as usual and resolve\n\t\t\t\t\t\tif not found,\n\t\t\t\t\t\t\tcall is hooked and waits till another transport with the same name connects before timeout\n\t\t\t\t\t\t\tif connects,\n\t\t\t\t\t\t\t\tsend as usual & resolve\n\t\t\t\t\t\t\tif not,\n\t\t\t\t\t\t\t\tfail with a timeout\n\t\t*/\n\n\t\tif (tid === '' || !_self.endpoint.transports[tid]) {\n\t\t\t_self.sendLogger.enabled && _self.sendLogger.log('\\n\\n[sendToID] transport to tid[%s] does not exist. Taking corrective action... \\n', tid);\n\n\n\t\t\tvar trans = _self.endpoint.findTransportByName(pTransName);\n\n\t\t\t// If found, continue with discovered transport\n\t\t\tif (trans) {\n\t\t\t\ttid = trans.id;\n\t\t\t}\n\n\t\t\t// Else wait for a new transport to connect, or reject on timeout\n\t\t\telse {\n\t\t\t\treturn Promise.resolve()\n\n\t\t\t\t\t// Wait for new transport with given name to setup\n\t\t\t\t\t.then(() => _self.endpoint.addTransportNameChangeHook(pTransName))\n\n\t\t\t\t\t// Once hook fires, call this recursively and try to resend\n\t\t\t\t\t.then((t) => this.sendToID(t.id, msg, mode, pTransName))\n\n\t\t\t\t\t// Reject if it fails (worst case situation)\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t_self.sendLogger.enabled && _self.sendLogger.warn('[ERROR] transport tName[%s] was not found as tid[%s]. Might lead to duplicated provider executions, if re-connections caused it.', tName, tid);\n\n\t\t\t\t\t\tif (!mode || mode != 'respond') {\n\t\t\t\t\t\t\t_self.sendLogger.enabled && _self.sendLogger.warn('Cannot call - missing transport');\n\t\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\t\tsent: false,\n\t\t\t\t\t\t\t\tstatus: false,\n\t\t\t\t\t\t\t\ttransport: pTransName,\n\t\t\t\t\t\t\t\tcommand: _self.name,\n\t\t\t\t\t\t\t\tresponse: 'transport removed or changed'\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_self.sendLogger.enabled && _self.sendLogger.warn('Cannot respond - missing transport');\n\t\t\t\t\t\t\treturn Promise.reject('transport missing');\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// NOTE - In case the tName has changed since the call\n\t\tvar tName = _self.endpoint.transports[tid].tName;\n\n\t\tmsg.source = _self.endpoint.label;\n\t\t_self.sendLogger.enabled && _self.sendLogger.log('Sending on transport [%s][%s], mode = %s,  msg =', tid, tName, mode, msg);\n\n\n\t\tif (!mode || mode != 'respond') {\n\n\t\t\treturn new Promise((res, rej) => {\n\n\t\t\t\tvar sent = false;\n\n\t\t\t\t// handler function\n\t\t\t\tvar handler = function (respData, msgType) {\n\t\t\t\t\t_self.sendLogger.enabled && _self.sendLogger.log('\\n\\nResponse handler called with respData & msgTypes as \\n', respData, msgType);\n\n\t\t\t\t\tdelete _self.responseHandlers[tName][msg.msgID];\n\n\n\t\t\t\t\tswitch (msgType) {\n\n\t\t\t\t\tcase MESSAGETYPES.responseAccept:\n\t\t\t\t\t\tres({\n\t\t\t\t\t\t\tsent: sent,\n\t\t\t\t\t\t\tstatus: true,\n\t\t\t\t\t\t\ttransport: tName,\n\t\t\t\t\t\t\tcommand: _self.name,\n\t\t\t\t\t\t\tresponse: respData\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MESSAGETYPES.responseFail:\n\t\t\t\t\t\tres({\n\t\t\t\t\t\t\tsent: sent,\n\t\t\t\t\t\t\tstatus: false,\n\t\t\t\t\t\t\ttransport: tName,\n\t\t\t\t\t\t\tcommand: _self.name,\n\t\t\t\t\t\t\tresponse: respData\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\n\t\t\t\tif (!_self.responseHandlers[tName])\n\t\t\t\t\t_self.responseHandlers[tName] = {};\n\n\t\t\t\t_self.sendLogger.enabled && _self.sendLogger.log('\\n\\nAdding response handler at [%s][%s] \\n', tName, msg.msgID);\n\t\t\t\t_self.responseHandlers[tName][msg.msgID] = handler;\n\n\n\t\t\t\tvar container = {\n\t\t\t\t\trpc_msg: {},\n\t\t\t\t\trpc_dir: _self.endpoint.dir\n\t\t\t\t};\n\t\t\t\tcontainer.rpc_msg[_self.name] = msg;\n\n\t\t\t\t_self.sendLogger.enabled && _self.sendLogger.log('\\n\\n\\nSending %s to [%s] as \\n', mode == 'respond' ? 'response' : 'request', tName, container);\n\t\t\t\tPromise.resolve(_self.endpoint.transports[tid].send(container))\n\t\t\t\t\t.then((s) => sent = true)\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\tsent = false;\n\t\t\t\t\t\thandler(e, MESSAGETYPES.responseFail);\n\t\t\t\t\t});\n\n\t\t\t});\n\t\t} else {\n\n\t\t\tvar container = {\n\t\t\t\trpc_msg: {},\n\t\t\t\trpc_dir: _self.endpoint.dir\n\t\t\t};\n\t\t\tcontainer.rpc_msg[_self.name] = msg;\n\n\t\t\t_self.sendLogger.enabled && _self.sendLogger.log('\\n\\n\\nSending %s to [%s] as \\n', mode == 'respond' ? 'response' : 'request', tName, container);\n\t\t\treturn Promise.resolve(_self.endpoint.transports[tid].send(container));\n\t\t}\n\t};\n\n\t/*\n\t\tData can be a value or a function.\n\t\tIf its a function, it will be evaluated for every new transport\n\n\t\tand passed params as:\n\t\t\t1. the transport tName, index - if found.\n\t\t\t2. null, null - if no transports are found, and it goes to waiting\n\n\t\t//TODO - improve consistency in params passed to data function.\n\n\t*/\n\trpcCommand.prototype.call = function (namespace, data, mode) {\n\t\tvar _self = this;\n\t\tvar tName;\n\t\tvar tasks = [];\n\t\tvar evaluate = false;\n\n\n\t\tif (typeof data === 'function') {\n\t\t\tevaluate = true;\n\t\t}\n\n\t\t// Send to all transports that match the namespace\n\t\tvar tasks = _self.endpoint.findTransportsByNamespace(namespace, { initialised: true })\n\t\t\t.map((t, i) => {\n\t\t\t\tvar msg = {\n\t\t\t\t\tmsgID: _self.autoID(),\n\t\t\t\t\tmsgType: MESSAGETYPES.request,\n\t\t\t\t\treqData: evaluate === true ? data(t.tName, i) : data,\n\t\t\t\t};\n\n\t\t\t\t_self.sendLogger.enabled && _self.sendLogger.log('Transport [%s] is valid. Attempting to send', t.id);\n\n\t\t\t\treturn _self.sendToID(t.id, msg, mode, t.tName);\n\t\t\t});\n\n\n\t\t// If transports were not found,\n\t\t// hook & wait for the first valid transport that connects\n\t\tif (tasks.length == 0){\n\n\t\t\tvar msg = {\n\t\t\t\tmsgID: _self.autoID(),\n\t\t\t\tmsgType: MESSAGETYPES.request,\n\t\t\t\treqData: evaluate === true ? data(null, null) : data,\n\t\t\t};\n\n\t\t\t_self.sendLogger.enabled && _self.sendLogger.log('No transports found for [%s]. Waiting', namespace);\n\n\t\t\treturn Promise.all([_self.sendToID('', msg, mode, namespace)]);\n\n\t\t}\n\n\t\t// Otherwise, wait till all messages have been sent & resolve.\n\t\telse\n\t\t\treturn Promise.all(tasks);\n\n\n\t};\n\n\t// rpcCommand.prototype.call = function (namespaceString, data) {\n\t// \tvar _self = this;\n\t//\n\t// \tvar msg = {\n\t// \t\tmsgID: _self.autoID(),\n\t// \t\tmsgType: MESSAGETYPES.request,\n\t// \t\treqData: data,\n\t// \t};\n\t//\n\t//\n\t// \t_self.sendLogger.enabled && _self.sendLogger.log('Requesting RPC with msg = ', msg);\n\t// \treturn _self.send(namespaceString, msg);\n\t//\n\t// };\n\n\n\trpcCommand.prototype.recieve = function (msg, transport) {\n\t\tvar _self = this;\n\t\tvar tName = transport.tName,\n\t\t\ttid = transport.id;\n\n\t\t_self.recvLogger.enabled && _self.recvLogger.log('\\n\\n\\nCommand [%s] Data recvd on [%s][%s] as \\n', _self.name, _self.endpoint.label, _self.endpoint.dir, tName, msg);\n\n\t\tswitch (msg.msgType) {\n\t\tcase MESSAGETYPES.responseAccept:\n\t\tcase MESSAGETYPES.responseFail:\n\t\t\t// console.log('\\n\\n\\nResponse recvd on [%s] from [%s] as\\n ',tName, msg.rtName, msg);\n\t\t\tif (_self.responseHandlers[tName] && _self.responseHandlers[tName][msg.respID]) {\n\t\t\t\t_self.sendLogger.enabled && _self.sendLogger.log('handler found. Responding !');\n\t\t\t\treturn Promise.resolve(_self.responseHandlers[tName][msg.respID](msg.respData, msg.msgType));\n\n\t\t\t} else {\n\t\t\t\t_self.sendLogger.enabled && _self.sendLogger.log('handler not found');\n\t\t\t\treturn Promise.reject(new Error('handler not found'));\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase MESSAGETYPES.request:\n\t\t\t// console .log('\\n\\nCommand[%s] Request recvd on [%s] as\\n ',_self.name, tName,msg);\n\n\t\t\tif (_self.requestHandlers.length > 0) {\n\t\t\t\t// console.log('\\n[%s]Request handlers found\\n ',_self.requestHandlers.length);\n\n\t\t\t\tvar chain = Promise.resolve();\n\t\t\t\tvar reqData = msg.reqData;\n\n\t\t\t\t_self.requestHandlers.forEach((h) => {\n\t\t\t\t\t/* Each handler is called with (v,p,s,t,msg) as follows\n\t\t\t\t\t\tv\t= reqData \t- data sent by caller,\n\t\t\t\t\t\tp\t= prev\t\t- response got from the prevhandler's execution for this call,\n\t\t\t\t\t\ts \t= msg.source \t- name of the calling transport (this was the actual usecase for tName ?)\n\t\t\t\t\t\tt\t= tName \t\t- name of current transport (TODO - buggy, points to local transport name)\n\t\t\t\t\t\tmsg \t= msg \t\t- full raw msg obj\n\t\t\t\t\t*/\n\t\t\t\t\tchain = chain.then((prev) => h(msg.reqData, prev, msg.source, tName, msg));\n\t\t\t\t});\n\t\t\t\treturn chain\n\t\t\t\t\t.then((respData) => {\n\t\t\t\t\t\t// console.log('\\nRequest handlers SUCCESS\\n Results are',respData);\n\n\t\t\t\t\t\tmsg.respID = msg.msgID;\n\t\t\t\t\t\tmsg.rtName = tName;\n\t\t\t\t\t\tmsg.msgID = _self.autoID();\n\t\t\t\t\t\tmsg.msgType = MESSAGETYPES.responseAccept;\n\t\t\t\t\t\tmsg.respData = respData;\n\t\t\t\t\t\tdelete msg.reqData;\n\t\t\t\t\t\treturn _self.sendToID(tid, msg, 'respond', tName);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t// console.log('\\nRequest handlers FAILED\\n Results are',e);\n\n\t\t\t\t\t\tmsg.respID = msg.msgID;\n\t\t\t\t\t\tmsg.rtName = tName;\n\t\t\t\t\t\tmsg.msgID = _self.autoID();\n\t\t\t\t\t\tmsg.msgType = MESSAGETYPES.responseFail;\n\t\t\t\t\t\tmsg.respData = e;\n\t\t\t\t\t\tdelete msg.reqData;\n\t\t\t\t\t\treturn _self.sendToID(tid, msg, 'respond', tName);\n\t\t\t\t\t})\n\t\t\t\t\t.then(() => _self.onProvideFn ? _self.onProvideFn(reqData, msg.respData, tName, msg) : null)\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\tconsole.error('[Octopus] Error while executing [%s] provider chain on [%s] - ', _self.name, tName, e);\n\t\t\t\t\t\treturn Promise.reject(e);\n\t\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\t_self.recvLogger.enabled && _self.recvLogger.error('ERROR - No requestHandlers for command[%s] on [%s][%s] -  tName, msg - ', _self.name, _self.endpoint.label, _self.endpoint.dir, tName, msg);\n\t\t\t\tmsg.respID = msg.msgID;\n\t\t\t\tmsg.rtName = tName;\n\t\t\t\tmsg.msgID = _self.autoID();\n\t\t\t\tmsg.msgType = MESSAGETYPES.responseFail;\n\t\t\t\tmsg.respData = 'no providers';\n\t\t\t\tdelete msg.reqData;\n\t\t\t\treturn _self.sendToID(tid, msg, 'respond', tName);\n\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t};\n\n\trpcCommand.prototype.provide = function (fn) {\n\t\tif (typeof fn == \"function\")\n\t\t\tthis.requestHandlers.push(fn);\n\t\telse {\n\t\t\tthrow new Error('Param passed to \"provide\" is not a function');\n\t\t}\n\t};\n\n\trpcCommand.prototype.unProvide = function (fn) {\n\t\tvar index = this.requestHandlers.findIndex((x) => x === fn);\n\t\tif (index > -1)\n\t\t\tthis.requestHandlers.splice(index, 1);\n\t\treturn this;\n\t};\n\n\t/*\n\t\tExecutes passed fn when provide response is successfully recieved by remote.\n\t\t\tAssuming transport send() function returns a promise on successfull\n\t\t\ttransfer of response message\n\t*/\n\trpcCommand.prototype.onProvide = function (fn) {\n\t\tif (typeof fn == \"function\")\n\t\t\tthis.onProvideFn = fn;\n\t\telse {\n\t\t\tthrow new Error('Param passed to \"onProvideFn\" is not a function');\n\t\t}\n\t};\n\n\n\n\t/* ----------------------------------------------------------- */\n\n\n\tmodule.exports = rpcCommand;\n\n})();\n","(function () {\n\n\tconst Namespace = require('./namespace.js');\n\tconst rpcStockTransports = require('./stockTransports.js');\n\tconst rpcTransport = require('./rpcTransport.js');\n\tconst rpcCommand = require('./rpcCommand.js');\n\t/* ----------------------------------------------------------- */\n\n\n\tvar rpcEndpoint = function (l, dir, options) {\n\t\toptions = options || {};\n\t\tthis.logger = options.logger.child(dir == 'i' ? 'EP:in' : 'EP:out');\n\n\n\t\tthis.transports = {};\n\t\tthis.nameChangeHooks = {};\n\t\tthis.label = l;\n\t\tthis.dir = dir;\n\t\tthis.commands = {};\n\t\tthis.transportTypes = rpcStockTransports;\n\n\t\tthis.logger.enabled && this.logger.log('Created new endpoint as [%s][%s]', l, dir);\n\n\t\treturn this;\n\t};\n\n\trpcEndpoint.prototype.pluginTransports = function (tColl) {\n\t\tthis.transportTypes = Object.assign(this.transportTypes, tColl);\n\t};\n\n\trpcEndpoint.prototype.over = function (socket, type) {\n\t\treturn new rpcTransport(type, socket, this, { logger: this.logger });\n\t};\n\trpcEndpoint.prototype.remove = function (socket) {\n\t\tvar _self = this;\n\t\t// Object.keys(_self.transports).forEach((tid) => {\n\t\t// \tif (_self.transports[tid].socket == socket){\n\t\t// \t\t_self.logger.enabled && _self.logger.log('Destroying & removing transport [%s] tName [%s]. ',tid,_self.transports[tid].tName);\n\t\t// \t\t_self.transports[tid].destroy();\n\t\t// \t\tdelete _self.transports[tid];\n\t\t// \t}\n\t\t// });\n\n\t\t// _self.logger.enabled && _self.logger.log('Attempting to remove socket. ',socket._octopus);\n\t\t// _self.logger.enabled && _self.logger.log('Current endpoint[%s][%s] transports are . ',_self.label, _self.dir, _self.transports);\n\n\t\tif (socket && socket._octopus && socket._octopus.transports) {\n\n\t\t\t// Go through transports added to socket\n\t\t\tsocket._octopus.transports.forEach((t) => {\n\n\t\t\t\t// See if its a transport of this endpoint\n\t\t\t\tvar foundT = Object.keys(_self.transports).find(x => _self.transports[x] === t);\n\n\t\t\t\t// if found, disassociate from socket, destroy and delete from endpoint\n\t\t\t\tif (foundT) {\n\t\t\t\t\tfoundT = _self.transports[foundT];\n\t\t\t\t\t_self.logger.enabled && _self.logger.warn('Destroying & removing transport [%s] tName [%s] from endpoint[%s][%s]. ', foundT.id, foundT.tName, _self.label, _self.dir);\n\n\t\t\t\t\tvar index = socket._octopus.transports.findIndex(x => x == t);\n\t\t\t\t\tsocket._octopus.transports.splice(index, 1);\n\n\n\t\t\t\t\tfoundT.destroy();\n\t\t\t\t\tdelete _self.transports[foundT.id];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\trpcEndpoint.prototype.rename = function (namespace) {\n\n\t\t/*\n\t\t\tNOTE - Must investigate if there are side effects ?\n\n\t\t\tShould we be allowed to change remote side name ?\n\t\t\t\tAny usecase where we need it ?\n\n\t\t\tIf our name change is accepted by remote side,\n\t\t\t \tshould it trigger name changes with other connected transports too ? since there can only be one name for the remote.\n\n\t\t\tIf we change the remote's name,\n\t\t\t\tshould it trigger name changes with other connected transports too ? since there can only be one name for the remote.\n\n\t\t\tIf so,\n\t\t\t\tCould this cause infinite loops / ripples ?\n\n\t\t\tFor eg - Say connection path is setup as\n\t\t\t\tA - B - C - D - A\n\t\t\t\t    |_______|\n\n\t\t*/\n\t\tvar _self = this;\n\t\tnamespace = new Namespace(namespace);\n\t\treturn {\n\t\t\tas: (newName) => {\n\t\t\t\t_self.label = newName;\n\t\t\t\tObject.keys(_self.transports).forEach((tid) => {\n\t\t\t\t\tif (namespace.test(_self.transports[tid].tName)) {\n\t\t\t\t\t\t_self.transports[tid].as(newName);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t};\n\n\t/*\n\t \tInternal hook called by transport, to signal a name change\n\t\t& Automatically cleans up after it executes once (resolve or reject).\n\t*/\n\trpcEndpoint.prototype.transportNameChanged = function (transport) {\n\n\t\t/*\n\t\t\tNOTE - Including both exact & NS match, for performance.\n\t\t\tthis ensures that any exact match is quickly detected and resolved first,\n\t\t\tcausing one less regex match transaction (more expensive) in the subsequent routine.\n\t\t*/\n\n\t\t// Run all hooks whose namespace exactly matches transport's tName\n\t\tif (this.nameChangeHooks[transport.tName]) {\n\t\t\tthis.nameChangeHooks[transport.tName].hooks.forEach(x => x(transport));\n\t\t\tdelete this.nameChangeHooks[transport.tName];\n\t\t}\n\n\t\t// Also, run all hooks whose namespace includes the transport's tName\n\t\tObject.keys(this.nameChangeHooks).map(k => {\n\t\t\tif (this.nameChangeHooks[k] && this.nameChangeHooks[k].ns.test(transport.tName)) {\n\t\t\t\tthis.nameChangeHooks[k].hooks.forEach(x => x(transport));\n\t\t\t\tdelete this.nameChangeHooks[k];\n\t\t\t}\n\t\t})\n\t};\n\n\t/*\n\t\tReturns a one-time hook promise that\n\t\t\t1> resolves when appropriate name change occurs\n\t\t\t2> rejects if timeout happens\n\n\t\t& Automatically cleans up if it rejects (times out).\n\t\tClean up on resolve is handled by triggering routine declared above.\n\t*/\n\trpcEndpoint.prototype.addTransportNameChangeHook = function (tName, timeout) {\n\t\tif (!this.nameChangeHooks[tName])\n\t\t\tthis.nameChangeHooks[tName] = {\n\t\t\t\tns: new Namespace(tName),\n\t\t\t\thooks: []\n\t\t\t};\n\n\t\tvar p = new Promise((res, rej) => {\n\t\t\tvar fn = (transport) => {\n\t\t\t\tif (res && !p.done) {\n\t\t\t\t\tp.done = true;\n\t\t\t\t\t// var i = this.nameChangeHooks[tName].hooks.findIndex(x => x == fn);\n\t\t\t\t\t// this.nameChangeHooks[tName].hooks.splice(i, 1);\n\t\t\t\t\tres(transport);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.nameChangeHooks[tName].hooks.push(fn);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (rej && !p.done) {\n\t\t\t\t\tp.done == true;\n\t\t\t\t\tvar i = this.nameChangeHooks[tName].hooks.findIndex(x => x == fn);\n\t\t\t\t\tthis.nameChangeHooks[tName].hooks.splice(i, 1);\n\t\t\t\t\tif (this.nameChangeHooks[tName].hooks.length == 0) {\n\t\t\t\t\t\tdelete this.nameChangeHooks[tName];\n\t\t\t\t\t}\n\t\t\t\t\trej();\n\t\t\t\t}\n\t\t\t}, timeout || 5000);\n\n\t\t});\n\n\t\treturn p;\n\t};\n\n\trpcEndpoint.prototype.displayString = function () {\n\t\tvar _self = this;\n\t\tvar logString = 'key\\t\\t\\tname\\t\\t\\ttype:id\\t\\t\\tinitalised\\n';\n\t\tObject.keys(_self.transports).forEach((tKey) => {\n\t\t\tlogString += `${tKey}\\t\\t${_self.transports[tKey].tName}\\t\\t${_self.transports[tKey].type +':'+_self.transports[tKey].id}\\t\\t${_self.transports[tKey].initialised}\\n`;\n\t\t});\n\t\treturn logString;\n\t};\n\n\trpcEndpoint.prototype.command = function (name) {\n\t\treturn new rpcCommand(name, this, { logger: this.logger });\n\t};\n\n\t// Returns the first transport that's an exact match by tName\n\trpcEndpoint.prototype.findTransportByName = function (tName) {\n\t\tvar tKey = Object.keys(this.transports).find(x => this.transports[x].tName == tName);\n\n\t\tif (tKey)\n\t\t\treturn this.transports[tKey];\n\t\telse\n\t\t\treturn null;\n\t};\n\n\t// Returns all transports that fall within a given namespace\n\trpcEndpoint.prototype.findTransportsByNamespace = function (namespace, options) {\n\t\toptions = options || {}\n\t\tvar ns = new Namespace(namespace);\n\t\tvar transports = Object.keys(this.transports)\n\t\t\t.map(x => this.transports[x]);\n\n\n\t\tif (options.intialised === true) {\n\t\t\ttransports = transports.filter(t => t.initialised === true)\n\t\t}\n\n\t\treturn transports\n\t\t\t.filter(t => ns.test(t.tName))\n\n\t};\n\n\t/* ----------------------------------------------------------- */\n\n\n\tmodule.exports = rpcEndpoint;\n\n})();\n","(function () {\n\tvar idCount = 0;\n\tvar autoID = function () {\n\t\treturn 'T' + (++idCount);\n\t};\n\n\tvar rpcTransport = function (type, socket, endpoint, options) {\n\t\t// console.log('Creating rpc transport [%s] for endpoint [%s][%s]',type, endpoint.label, endpoint.dir);\n\t\toptions = options || {};\n\t\tvar _self = this;\n\n\t\t_self.id = autoID();\n\t\t_self.logger = options.logger.child('T:' + type + ':' + _self.id);\n\n\t\t_self.endpoint = endpoint;\n\t\t_self.type = type;\n\t\t_self.socket = socket; // Also used for matching & removal, besides internal socket access.\n\t\t_self.tName = 'nonname';\n\t\t_self.initialised = false;\n\t\t_self.disabled = false;\n\t\t_self.nameClock = 0;\n\t\t_self.dirFlip = {\n\t\t\ti: 'o',\n\t\t\to: 'i'\n\t\t};\n\n\t\t// Add trasport type specific methods to self\n\t\tObject.assign(_self, _self.endpoint.transportTypes[type](type, socket));\n\t\tif(!socket._octopus)\n\t\t\tsocket._octopus = {};\n\n\t\tif(!socket._octopus.transports)\n\t\t\tsocket._octopus.transports = [];\n\n\t\tif(!socket._octopus.transports.includes(this))\n\t\t\tsocket._octopus.transports.push(this);\n\n\t\t_self.initPromise = new Promise((res, rej) => {\n\t\t\t_self.recvHandler = function (data) {\n\n\t\t\t\t// Abort if we're disabled\n\t\t\t\tif(_self.disabled)\n\t\t\t\t\treturn;\n\n\n\t\t\t\t// _self.logger.enabled && _self.logger.log('[onRecv] Data recvd on [%s][%s]',_self.tName,_self.endpoint.dir, data);\n\t\t\t\tif (data.rpc_dir == _self.dirFlip[_self.endpoint.dir]) {\n\t\t\t\t\t// console.log('[onRecv] Data accepted on [%s][%s]',_self.tName,_self.endpoint.dir, data);\n\n\t\t\t\t\tif (data.rpc_tName_change) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t\tNOTE - Implementing \"Latest & last write wins\" consensus policy :\n\t\t\t\t\t\t\t\tWHY ? - Required to solve disputes when both(or more) endpoints request a name change at the same time.\n\t\t\t\t\t\t\t\tWithout this, a simultaneous request causes each one to sends his name change over while implementing the other's name change request.\n\t\t\t\t\t\t\t\t \tconsequence - a name swap, instead of consensus on a single name value.\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\tif(data.rpc_tName_change.request == true){\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\tOpposite party has requested a name change transaction, to be initiated from here.\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\t_self.logger.enabled && _self.logger.log('Name change requested by remote. Initiating transaction...',_self.tName);\n\n\t\t\t\t\t\t\t_self.as(_self.tName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (data.rpc_tName_change.ack == true) {\n\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\tOpposite party has accepted the name change that we proposed.\n\t\t\t\t\t\t\t\tHurray. Signal namechange to endpoint & resolve.\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\t_self.logger.enabled && _self.logger.log('Name change to [%s] acknowledged.',_self.tName);\n\n\t\t\t\t\t\t\t_self.endpoint.transportNameChanged(_self);\n\n\t\t\t\t\t\t\tif (!_self.initialised) {\n\t\t\t\t\t\t\t\t_self.initialised = true;\n\t\t\t\t\t\t\t\t_self.logger.enabled && _self.logger.log('changed initialised status from false to true');\n\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (data.rpc_tName_change.force || data.rpc_tName_change.clock >= _self.nameClock) {\n\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\tOpposite party's clock is higher or has already reached the same level (ie before us).\n\t\t\t\t\t\t\t\tAccept their proposal, send ack, signal namechange to endpoint\n\t\t\t\t\t\t\t*/\n\n\t\t\t\t\t\t\t_self.logger.enabled && _self.logger.log('[%s, clock %s] [%s] Changing name of transport [%s][%s] to [%s] at clock =', _self.endpoint.label, _self.nameClock, data.rpc_tName_change.force ? 'forced' : '', _self.tName, _self.id, data.rpc_tName_change.tName, data.rpc_tName_change.clock);\n\t\t\t\t\t\t\t// delete _self.endpoint.transports[_self.tName];\n\t\t\t\t\t\t\t_self.tName = data.rpc_tName_change.tName;\n\t\t\t\t\t\t\t_self.nameClock = data.rpc_tName_change.clock;\n\t\t\t\t\t\t\t// _self.endpoint.transports[_self.tName] = _self;\n\n\t\t\t\t\t\t\t_self.logger.enabled && _self.logger.log('Name change to [%s] accepted.',_self.tName);\n\n\t\t\t\t\t\t\t// Send ack\n\t\t\t\t\t\t\t_self.send({\n\t\t\t\t\t\t\t\trpc_tName_change: {\n\t\t\t\t\t\t\t\t\ttName: _self.tName,\n\t\t\t\t\t\t\t\t\tclock: _self.nameClock,\n\t\t\t\t\t\t\t\t\tack: true\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\trpc_dir: _self.endpoint.dir\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t_self.endpoint.transportNameChanged(_self);\n\n\t\t\t\t\t\t\tif (!_self.initialised) {\n\t\t\t\t\t\t\t\t_self.initialised = true;\n\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\t\tOur clock is higher, so don't accept.\n\t\t\t\t\t\t\t\tPropose our name instead.\n\t\t\t\t\t\t\t*/\n\n\t\t\t\t\t\t\t_self.logger.enabled && _self.logger.log('[%s, clock %s] [%s] Rejecting name change of transport [%s][%s] as [%s] at clock =', _self.endpoint.label, _self.nameClock, data.rpc_tName_change.force ? 'forced' : '', _self.tName, _self.id, data.rpc_tName_change.tName, data.rpc_tName_change.clock);\n\t\t\t\t\t\t\t_self.send({\n\t\t\t\t\t\t\t\trpc_tName_change: {\n\t\t\t\t\t\t\t\t\ttName: _self.tName,\n\t\t\t\t\t\t\t\t\tclock: _self.nameClock,\n\t\t\t\t\t\t\t\t\tforce: true\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\trpc_dir: _self.endpoint.dir\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.rpc_msg) {\n\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\tObject.keys(data.rpc_msg).forEach((cKey) => {\n\n\t\t\t\t\t\t\tif (_self.endpoint.commands[cKey]){\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t// _self.logger.enabled && _self.logger.log('[onRecv] Data recvd on [%s][%s]',_self.tName,_self.endpoint.dir, data);\n\t\t\t\t\t\t\t\t_self.endpoint.commands[cKey].recieve(data.rpc_msg[cKey], _self)\n\t\t\t\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t\t\t\t_self.logger.enabled && _self.logger.error('[%s] Failed to respond to [%s] request (registered) from [%s] because -  ', _self.endpoint.label, cKey, _self.tName);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t// Create a temp command and process.\n\t\t\t\t\t\t\t\t_self.endpoint.command(cKey).recieve(data.rpc_msg[cKey], _self)\n\t\t\t\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t\t\t\t_self.logger.enabled && _self.logger.error('[%s] Failed to respond to [%s] request (temporary) from [%s] because -  ', _self.endpoint.label, cKey, _self.tName);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t});\n\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t_self.onRecv(_self.recvHandler);\n\n\t\t\t_self.destroy = function(){\n\t\t\t\t// _self.logger.enabled && _self.logger.log('[%s] Destroying transport [%s] =', _self.endpoint.label, _self.tName);\n\t\t\t\t_self.disabled = true;\n\t\t\t\t_self.socket = null;\n\n\t\t\t\tif(_self.stopRecv){\n\t\t\t\t\t// _self.logger.enabled && _self.logger.log('[%s] Destroying transport [%s] - stopRecv found =', _self.endpoint.label, _self.tName);\n\t\t\t\t\t_self.stopRecv(_self.recvHandler);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t_self.as = function (tName) {\n\t\t\t\t// delete _self.endpoint.transports[_self.tName];\n\t\t\t\tvar prevName = _self.tName;\n\t\t\t\t_self.tName = tName;\n\t\t\t\t_self.nameClock++;\n\t\t\t\t_self.logger.enabled && _self.logger.log('[%s] Sending namechange of transport [%s][%s] to [%s] at clock =', _self.endpoint.label, prevName, tName, _self.id, _self.nameClock);\n\t\t\t\t_self.send({\n\t\t\t\t\trpc_tName_change: {\n\t\t\t\t\t\ttName: _self.tName,\n\t\t\t\t\t\tclock: _self.nameClock\n\t\t\t\t\t},\n\t\t\t\t\trpc_dir: _self.endpoint.dir\n\t\t\t\t});\n\t\t\t\t// // _self.endpoint.transports[tName] = _self;\n\t\t\t\t// if(!_self.initialised) {\n\t\t\t\t// \t_self.initialised = true;\n\t\t\t\t// \tres();\n\t\t\t\t// }\n\t\t\t\treturn _self;\n\t\t\t};\n\n\t\t\t// Triggers an '.as()' function on the remote end of the socket.\n\t\t\t_self.asRemote = function(){\n\t\t\t\t_self.logger.enabled && _self.logger.log('Requesting namechange from remote, at clock =', _self.nameClock);\n\t\t\t\t_self.send({\n\t\t\t\t\trpc_tName_change: {\n\t\t\t\t\t\trequest:true\n\t\t\t\t\t},\n\t\t\t\t\trpc_dir: _self.endpoint.dir\n\t\t\t\t});\n\n\t\t\t\treturn _self;\n\t\t\t};\n\t\t});\n\n\t\t_self.endpoint.transports[_self.id] = _self;\n\t\t_self.logger.enabled && _self.logger.log('Added transport [%s][%s] for endpoint [%s][%s]', type, _self.id, endpoint.label, endpoint.dir);\n\t\treturn _self;\n\t};\n\n\t/* ----------------------------------------------------------- */\n\n\n\tmodule.exports = rpcTransport;\n\n})();\n","(function () {\n\n\tvar transportTypes = {};\n\n\ttransportTypes['socketio'] = function (type, socket) {\n\t\treturn {\n\t\t\tsend: (data) => socket.send(JSON.stringify(data)),\n\t\t\tonRecv: (fn) => socket.on('message', (data) => fn(JSON.parse(data))),\n\t\t\tstopRecv: (fn) => socket.removeListener('message', fn)\n\t\t}\n\t};\n\ttransportTypes['websocket'] = function (type, socket) {\n\t\treturn {\n\t\t\tsend: (data) => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tsocket.send(\n\t\t\t\t\t\tJSON.stringify(data),\n\t\t\t\t\t\t(e) => e ? rej(e) : res()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t},\n\t\t\tonRecv: (fn) => socket.on('message', (data) => fn(JSON.parse(data))),\n\t\t\tstopRecv: (fn) => socket.removeListener('message', fn)\n\t\t}\n\t};\n\ttransportTypes['processLocal'] = function (type, socket) {\n\t\treturn {\n\t\t\tsend: (data) => socket.emit('message', JSON.stringify(data)),\n\t\t\tonRecv: (fn) => socket.on('message', (data) => fn(JSON.parse(data))),\n\t\t\tstopRecv: (fn) => socket.removeListener('message', fn)\n\t\t}\n\t};\n\ttransportTypes['nodeEELocal'] = function (type, socket) {\n\t\treturn {\n\t\t\tsend: (data) => socket.emit('message', JSON.stringify(data)),\n\t\t\tonRecv: (fn) => socket.on('message', (data) => fn(JSON.parse(data))),\n\t\t\tstopRecv: (fn) => socket.removeListener('message', fn)\n\t\t}\n\t};\n\ttransportTypes['processRemote'] = function (type, socket) {\n\t\treturn {\n\t\t\tsend: (data) => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tvar s = socket.send(\n\t\t\t\t\t\tJSON.stringify(data),\n\t\t\t\t\t\t(e) => e instanceof Error ? rej(e) : (s === true ? res(s) : rej(s))\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t},\n\t\t\tonRecv: (fn) => socket.on('message', (data) => fn(JSON.parse(data))),\n\t\t\tstopRecv: (fn) => socket.removeListener('message', fn)\n\t\t}\n\t};\n\ttransportTypes['nodeEERemote'] = function (type, socket) {\n\t\treturn {\n\t\t\tsend: (data) => socket.send('message', JSON.stringify(data)),\n\t\t\tonRecv: (fn) => socket.on('message', (data) => fn(JSON.parse(data))),\n\t\t\tstopRecv: (fn) => socket.removeListener('message', fn)\n\t\t}\n\t};\n\n\tmodule.exports = transportTypes;\n\n})();\n","module.exports = function(debug){\n\n\tvar logger = function (suffix) {\n\t\tthis.enabled = false;\n\t\tthis.prefix = suffix || '';\n\n\t\tif(typeof debug == 'function'){\n\t\t\tthis.log = debug(`logs:` + this.prefix);\n\t\t\tthis.warn = debug(`warnings:` + this.prefix);\n\t\t\tthis.error = debug(`errors:` + this.prefix);\n\t\t\tthis.enabled = true;\n\t\t}\n\t\telse{\n\t\t\tthis.log = ()=>{};\n\t\t\tthis.warn = ()=>{};\n\t\t\tthis.error = ()=>{};\n\t\t\tthis.enabled = false;\n\t\t}\n\t};\n\n\tlogger.prototype.child = function (suffix) {\n\t\treturn new logger(this.prefix + ':' + suffix);\n\t};\n\n\treturn logger;\n};\n","module.exports = function (debug) {\n\n\tconst Namespace = require('./components/namespace.js');\n\tconst rpcEndpoint = require('./components/rpcEndpoint.js');\n\tconst debugr = require('debug-pest')(debug);\n\tvar appLogger = new debugr('octopus');\n\n\t/* ----------------------------------------------------------- */\n\n\tvar rpcs = {};\n\n\tvar rpc = function (name, options) {\n\t\toptions = options || {};\n\n\n\t\tif (options.create === true) {\n\t\t\tthis.name = name;\n\t\t\tthis.commands = {};\n\t\t\tthis.logger = appLogger.child(this.name);\n\n\t\t\tthis.incoming = new rpcEndpoint(name, 'i', { logger: this.logger });\n\t\t\tthis.outgoing = new rpcEndpoint(name, 'o', { logger: this.logger });\n\n\t\t\tthis.logger.enabled && this.logger.log('Created new Octopus RPC as ', this.name);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (!rpcs[name]) {\n\t\t\toptions.create = true;\n\t\t\trpcs[name] = new rpc(name, options);\n\t\t}\n\n\n\t\treturn rpcs[name];\n\n\t};\n\trpc.prototype.displayTransports = function () {\n\t\t// console.log('\\n\\n\\n------ Transports for [%s] are:\\n', this.name);\n\t\t// console.log('incoming:\\n');\n\t\t// this.incoming.displayTransports();\n\t\t// console.log('\\n\\noutgoing:\\n');\n\t\t// this.outgoing.displayTransports();\n\t\t// console.log('\\n--------------------------\\n\\n');\n\n\t\tvar logString = `\n\n-------------------- TRANSPORTS for [${this.name}] are : ---------------------------\n\nIncoming (provides):\n\n`;\n\n\t\tlogString += this.incoming.displayString();\n\t\tlogString += `\\n\\n-------------\\nOutgoing (calls):\\n\\n`;\n\t\tlogString += this.outgoing.displayString();\n\t\tlogString += '\\n\\n------------------------------------------------------------------------------------\\n\\n';\n\n\t\tconsole.log(logString);\n\t};\n\n\trpc.prototype.over = function (socket, type) {\n\t\tvar tasks = [];\n\t\ttasks.push(\n\t\t\tthis.incoming.over(socket, type)\n\t\t\t.as(this.name)\n\t\t\t.initPromise\n\t\t);\n\t\ttasks.push(\n\t\t\tthis.outgoing.over(socket, type)\n\t\t\t.asRemote()\n\t\t\t.initPromise\n\t\t);\n\t\treturn Promise.all(tasks);\n\t};\n\trpc.prototype.remove = function (socket) {\n\t\tthis.incoming.remove(socket);\n\t\tthis.outgoing.remove(socket);\n\t};\n\n\trpc.prototype.pluginTransports = function (tObj) {\n\t\tthis.incoming.pluginTransports(tObj);\n\t\tthis.outgoing.pluginTransports(tObj);\n\t};\n\trpc.prototype.command = function (name) {\n\t\tvar _self = this;\n\t\tif (!_self.commands[name]) {\n\t\t\tvar iC = _self.incoming.command(name);\n\t\t\tvar oC = _self.outgoing.command(name);\n\t\t\t_self.MESSAGETYPES = iC.MESSAGETYPES || oC.MESSAGETYPES;\n\n\t\t\t_self.commands[name] = {\n\t\t\t\tprovide: function (fn) {\n\t\t\t\t\tiC.provide(fn);\n\t\t\t\t\treturn _self.commands[name];\n\t\t\t\t},\n\t\t\t\tunProvide: function (fn) {\n\t\t\t\t\tiC.unProvide(fn);\n\t\t\t\t\treturn _self.commands[name];\n\t\t\t\t},\n\t\t\t\tonProvide: function (fn) {\n\t\t\t\t\tiC.onProvide(fn);\n\t\t\t\t\treturn _self.commands[name];\n\t\t\t\t},\n\t\t\t\tcall: function (filter, data) {\n\t\t\t\t\t// _self.displayTransports();\n\t\t\t\t\treturn oC.call(filter, data);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\treturn this.commands[name];\n\t};\n\trpc.prototype.renameTo = function (newName) {\n\t\tthis.incoming.rename(this.name)\n\t\t\t.as(newName);\n\t\tthis.name = newName;\n\t\t// this.outgoing.label = newName;\n\t\treturn this;\n\t};\n\n\n\t/* ----------------  Result parsing & Resolving to Promise resolve/reject -----------*/\n\n\trpc.prototype.parseByStatus = function (res) {\n\t\tvar valids = [],\n\t\t\tinvalids = [],\n\t\t\tcheck;\n\t\tfor (var i = 0; i < res.length; i++) {\n\t\t\tcheck = res[i];\n\t\t\tif (check.sent === true && check.status === true)\n\t\t\t\tvalids.push(check);\n\t\t\telse\n\t\t\t\tinvalids.push(check);\n\t\t}\n\t\treturn {\n\t\t\tvalids: valids,\n\t\t\tinvalids: invalids\n\t\t};\n\t};\n\n\trpc.prototype.resolve = function (p) {\n\t\tif (p.sent === true && p.status === true)\n\t\t\treturn Promise.resolve(p.response);\n\t\telse\n\t\t\treturn Promise.reject(p.response);\n\t};\n\trpc.prototype.resolveAll = function (p) {\n\n\t\tfor (var i = 0; i < p.length; i++) {\n\t\t\tif (p[i].sent === false || p[i].status === false)\n\t\t\t\treturn Promise.reject(p);\n\t\t}\n\n\t\treturn Promise.resolve(p);\n\t};\n\trpc.prototype.resolveAtLeastOne = function (p) {\n\n\t\tfor (var i = 0; i < p.length; i++) {\n\t\t\tif (p[i].sent === true && p[i].status === true)\n\t\t\t\treturn Promise.resolve(p);\n\t\t}\n\n\t\treturn Promise.reject(p);\n\t};\n\n\n\n\n\treturn rpc;\n\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}